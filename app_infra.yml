AWSTemplateFormatVersion: 2010-09-09
Description:
  This template deploys Application infra stack for Project 2 Udacity, with

Parameters: 
  ProjectName:
    Type: String
    Description: Project name that will be prefixed to resource names
  NetworkStackName:
    Type: String
    Description: Network stack name
  EC2AMI:
    Type: AWS::EC2::Image::Id
    Description: AMI ID for the EC2 instance
  EC2Key:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key pair for the EC2 instance

Resources: 
  # AppS3Bucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Sub ${ProjectName}-app-bucket
  #     AccessControl: Private
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${ProjectName}-app-bucket

  # AutoScaling Group
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet1Id
        - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet2Id
      LaunchConfigurationName: !Ref AppLaunchConfiguration
      MinSize: 4
      MaxSize: 4
      DesiredCapacity: 4
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-app-asg
          PropagateAtLaunch: true
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      TargetGroupARNs:
        - !Ref AppTargetGroup

  # Launch Configuration
  AppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref EC2AMI
      InstanceType: t2.medium
      SecurityGroups:
        - Fn::ImportValue: !Sub ${NetworkStackName}-AutoScalingSG
      KeyName: !Ref EC2Key
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
            DeleteOnTermination: true
      # UserData:
      #   Fn::Base64: !Sub |
      #     #!/bin/bash -xe
      #     yum update -y
      #     yum install -y httpd php git
      #     systemctl enable httpd
      #     systemctl start httpd
      #     cd /var/www/html
      #     git clone

  # Load Balancer
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-app-elb
      Scheme: internet-facing # this is for route requests over the internet to our target, opposed to internal using private ip
      Subnets:
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet1Id
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet2Id
      SecurityGroups:
        - Fn::ImportValue: !Sub ${NetworkStackName}-LoadBalancerSG
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-app-elb

  # Listener
  AppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup

  # Rule
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref AppListener
      Priority: 1
          
  # Target Group
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-app-tg
      VpcId: 
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcId
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /index.html
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: 200

Outputs:

  ALBDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt AppLoadBalancer.DNSName