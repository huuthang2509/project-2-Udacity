AWSTemplateFormatVersion: 2010-09-09
Description:
  This template deploys Application infra stack for Project 2 Udacity, with

Parameters: 
  ProjectName:
    Type: String
    Description: Project name that will be prefixed to resource names
  NetworkStackName:
    Type: String
    Description: Network stack name
  EC2AMI:
    Type: AWS::EC2::Image::Id
    Description: AMI ID for the EC2 instance
  ASCLKey:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key pair for the EC2 instance in Autoscaling Group, use for debug
  BastionKey:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key pair for the Bastion instance
  BucketName:
    Type: String
    Description: Name of the S3 bucket

Resources: 

  # IAM Role
  RoleAccessS3ForASCL:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-RoleAccessS3ForASCL
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - autoscaling.amazonaws.com
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub ${ProjectName}-RoleAccessS3ForASCL
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                Resource:
                  - !Sub arn:aws:s3:::${BucketName}
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !Sub arn:aws:s3:::${BucketName}/*

  ASCLInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref RoleAccessS3ForASCL

  # AutoScaling Group
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet1Id
        - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet2Id
      LaunchConfigurationName: !Ref AppLaunchConfiguration
      MinSize: 4
      MaxSize: 4
      DesiredCapacity: 4
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-app-asg
          PropagateAtLaunch: true
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      TargetGroupARNs:
        - !Ref AppTargetGroup

  # Launch Configuration
  AppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref EC2AMI
      InstanceType: t3.small
      IamInstanceProfile: !Ref ASCLInstanceProfile
      SecurityGroups:
        - Fn::ImportValue: !Sub ${NetworkStackName}-AutoScalingSG
      # KeyName: !Ref ASCLKey # Use for debug
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo apt install unzip
          sudo unzip awscliv2.zip
          sudo ./aws/install
          aws s3 cp s3://project2uda/index.html /var/www/html/index.html
          
  # Load Balancer
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-app-elb
      Scheme: internet-facing # this is for route requests over the internet to our target, opposed to internal using private ip
      Subnets:
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet1Id
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet2Id
      SecurityGroups:
        - Fn::ImportValue: !Sub ${NetworkStackName}-LoadBalancerSG
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-app-elb

  # Listener
  AppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup

  # Rule
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /index.html
      ListenerArn: !Ref AppListener
      Priority: 1
          
  # Target Group
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-app-tg
      VpcId: 
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcId
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /index.html
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: 200

  # Bastion Host
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2AMI
      InstanceType: t2.micro
      KeyName: !Ref BastionKey
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${NetworkStackName}-BastionSG
      SubnetId: 
        Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet1Id
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-bastion

Outputs:

  ALBDNSName:
    Description: DNS name of the load balancer
    Value: !Sub
      - 'http://${ALBDNS}'
      - ALBDNS: !GetAtt AppLoadBalancer.DNSName